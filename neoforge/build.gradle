plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "neoforge"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
}

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}

processResources {
    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
    inputs.property "META-INF/neoforge.mods.toml", project.version
}

processTestmodResources {
    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
    inputs.property "META-INF/neoforge.mods.toml", project.version
}

loom {
    //accessWidenerPath = project(":common").loom.accessWidenerPath

    neoForge  {
        //     convertAccessWideners = true
        //     extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "neoforge"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def ENV = System.getenv()

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = "${rootProject.archives_base_name}-${project.name}"
            from components.java
        }
    }

    repositories {
        maven {
            url ENV.MAVEN_URL
            credentials {
                username ENV.MAVEN_USER
                password ENV.MAVEN_PASSWORD
            }
        }
    }
}
